package kindconfig

import (
	"github.com/PatrickLaabs/frigg/pkg/common/vars"
	"github.com/fatih/color"
	"gopkg.in/yaml.v3"
	"os"
)

type AutoGenerated struct {
	Kind       string `yaml:"kind"`
	APIVersion string `yaml:"apiVersion"`
	Networking struct {
		IPFamily string `yaml:"ipFamily"`
	} `yaml:"networking"`
	Nodes []struct {
		Role        string `yaml:"role"`
		ExtraMounts []struct {
			HostPath      string `yaml:"hostPath"`
			ContainerPath string `yaml:"containerPath"`
		} `yaml:"extraMounts"`
	} `yaml:"nodes"`
}

// KindConfigGen generates a kind-config.yaml to the .frigg-working dir
func KindConfigGen() {
	println(color.YellowString("Generating kind-config"))

	data := &AutoGenerated{
		Kind:       "Cluster",
		APIVersion: "kind.x-k8s.io/v1alpha4",
		Networking: struct {
			IPFamily string `yaml:"ipFamily"`
		}{IPFamily: "dual"},
		Nodes: []struct {
			Role        string `yaml:"role"`
			ExtraMounts []struct {
				HostPath      string `yaml:"hostPath"`
				ContainerPath string `yaml:"containerPath"`
			} `yaml:"extraMounts"`
		}{
			{
				Role: "control-plane",
				ExtraMounts: []struct {
					HostPath      string `yaml:"hostPath"`
					ContainerPath string `yaml:"containerPath"`
				}([]struct {
					HostPath      string
					ContainerPath string
				}{
					{
						HostPath:      "/var/run/docker.sock",
						ContainerPath: "/var/run/docker.sock",
					},
				}),
			},
		},
	}

	// Marshal to YAML
	yamlData, err := yaml.Marshal(data)
	if err != nil {
		println(color.RedString("error on marshaling data to yaml: %v\n", err))
	}

	homedir, err := os.UserHomeDir()
	if err != nil {
		println(color.RedString("error on accessing home directory: %v\n", err))
	}

	friggDir := homedir + "/" + vars.FriggDirName
	newFilePath := friggDir + "/" + vars.KindconfigName

	// Write to file
	err = os.WriteFile(newFilePath, yamlData, 0644)
	if err != nil {
		println(color.RedString("error on writing kindconfig yaml: %v\n", err))
	}
}
